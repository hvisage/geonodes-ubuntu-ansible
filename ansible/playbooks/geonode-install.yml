---

- hosts: geonode
  become: yes

  tasks:
  - name: needed for apt
    shell: apt-get install python-apt

  - name: removing initial users not needed from here on
    user: state=absent name={{item}}
    with_items:
      - debian
      - ubuntu

  - name: geonode group
    group: state=present name={{GEONODE_GROUP}}

  - name: User for geonode
    user: state=present
      name={{GEONODE_USER}}
      createhome=yes
      home={{GEONODE_HOME}}
      shell=/dev/false





  - name: apt keys for postgresql apt repo
    apt_key: url={{item}} state=present
    with_items:
      - https://www.postgresql.org/media/keys/ACCC4CF8.asc

  - name: apt keys id for QGIS apt repo
    apt_key: id={{item}} keyserver=keyserver.ubuntu.com state=present
    with_items:
      - 3FF5FFCAD71472C4
      - 073D307A618E5811


  - name: The APT repositories
    apt_repository: repo={{item}} state=present update_cache=yes
    with_items:
      - 'ppa:nginx/stable'
      - 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main'
      - 'deb http://qgis.org/debian xenial main'
  #
  # - name: do apt-get update_cache
  #   apt: upgrade=dist update_cache=yes

  - name: packages to install
    apt: name={{item}} state=latest update_cache=yes
    with_items:
      - git
      - python-pip
      - python-virtualenv
      - apache2
      - libapache2-mod-wsgi
      - libapache2-mod-fcgid
      - qgis-server
      - python-qgis
      - postgresql-9.5
      - postgresql-contrib-9.5
#      - postgresql-9.5-postgis
#      - postgresql-9.5-postgis-scripts
      - gcc
      - gdal-bin
      - gettext
      - libgeos-dev
      - libjpeg-dev
      - libpng-dev
      - libpq-dev
      - libproj-dev
      - libxml2-dev
      - libxslt-dev
      - python-dev
      - python-gdal
      - python-imaging
      - python-pastescript
      - python-psycopg2
      - python-urlgrabber


- hosts: geonode
  name: Doing the Apache and module stuff
  become: yes
  roles:
  - role: apache-fcgi



- hosts: geonode
  name: OTF plugins
  become: yes
  tags: OTF
  tasks:
  - name: directories
    file: path=/opt/qgis-server/plugins
      recurse=yes
      state=directory

  - name: git clone OTF-Project
    git:
      clone=yes
      dest=/opt/qgis-server/plugins/otf-project
      repo=https://github.com/kartoza/otf-project.git
      version=0a44fa4ccc40a5645af7d4349c63b9bb2f995595
#Here we need to still do some configs to test, or do we?


# <add-experssions-of-choice>
# https://docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user
# the following will only work with pipelining as per ansible.cfg
- hosts: geonode
  name: postgresql users etc.
  tags: postgres
  become: yes
  become_user: postgres
  tasks:
  - name: shell
    shell: id -a
  - name: create geonode users
    postgresql_user:
      name=geonode
      password="geonode"
      state=present
  - name: create geonode database
    postgresql_db: name=geonode
      state=present
      owner=geonode
  - name: fix local logins from unix to md5
    #This is much VooDoo... much like radio waves and DX propagation
    lineinfile:
      state=present
      dest=/etc/postgresql/9.5/main/pg_hba.conf
      backrefs=yes
      regexp=(#*.*local.*all.*all.*)peer
      line='\1 md5'
      backup=yes
  - name: service postgresql reload
    become_user: root
    service:
      name=postgresql
      state=reloaded
      enabled=yes


- hosts: geonode
  name: geonode gits
  tags: geonode-git
  become: yes
  tasks:
  - name: directories
    file: path=/home/data state=directory recurse=yes

  - name: git pull geonode
    git:
      clone=yes
      dest={{ GEONODE_APPHOME }}
      depth=1
      repo=https://github.com/kartoza/geonode.git
      version=fix_qgis_log
      # repo=https://github.com/geonode/geonode.git

#HEre we still need to do some virtualenv stuff...

- hosts: geonode
  name: geonode virtualenv
  tags: virtualenv
  become: yes
  tasks:
  - name: create virtualev setup
    pip:
      name=pip version=8.1.1
      chdir={{GEONODE_HOME}}
      virtualenv={{VIRTAULENV_HOME}}
      virtualenv_site_packages=yes
      state=present

#I Honestly don't like this hackering:
  - name: pip install -e .
    shell: "{{VIRTAULENV_HOME}}/bin/pip install -e {{ GEONODE_APPHOME }}"
    # pip:
    #   virtualenv={{VIRTAULENV_HOME}}
    #   chdir={{ GEONODE_APPHOME }}
    #   extra_args="-e ."
    #
  - name: pip install https://github.com/kartoza/geonode_qgis_server/archive/develop.zip
    # shell: {{VIRTAULENV_HOME}}/bin/pip install https://github.com/kartoza/geonode_qgis_server/archive/develop.zip
    pip:
      virtualenv={{VIRTAULENV_HOME}}
      chdir={{ GEONODE_APPHOME }}
      name=https://github.com/kartoza/geonode_qgis_server/archive/develop.zip
#Don't have any idea yet to run the rest in that environment,
# other than to create a script to do it, and push that up

  - name: python manage.py migrate base
    command: "{{VIRTAULENV_HOME}}/bin/python manage.py {{item}} chdir={{ GEONODE_APPHOME }}"
    ignore_errors: yes
    with_items:
      - "migrate base"
      - "migrate layers"
      - "syncdb"
      - "collectstatic --noinput"

  # - name: python manage.py migrate layers
  #   command: {{VIRTAULENV_HOME}}/bin/python manage.py migrate layers chdir={{ GEONODE_APPHOME }}
  #   ignore_errors: yes
  #
  # - name: python manage.py syncdb
  #   command: {{VIRTAULENV_HOME}}/bin/python manage.py syncdb chdir={{ GEONODE_APPHOME }}
  #
  # #- name: python manage.py createsuperuser
  # #  # command: {{VIRTAULENV_HOME}}/bin/python manage.py createsuperuser chdir={{ GEONODE_APPHOME }}
  # #  command: echo "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'admin')" | {{VIRTAULENV_HOME}}/bin/python manage.py shell
  #
  # - name: python manage.py collectstatic
  #   command: {{VIRTAULENV_HOME}}/bin/python manage.py  collectstatic --noinput chdir={{ GEONODE_APPHOME }}

  - name: cp local_settings.py.qgis.sample local_settings.py
    command: cp local_settings.py.qgis.sample local_settings.py chdir={{ GEONODE_APPHOME }}/geonode

  - name: TIME_ZONE = 'America/Chicago'
    lineinfile:
      dest={{ GEONODE_APPHOME }}/geonode/local_settings.py
      regexp='^TIME_ZONE'
      line='TIME_ZONE=\'{{TIME_ZONE}}\''
  - name: siteurl
    lineinfile:
      dest={{ GEONODE_APPHOME }}/geonode/local_settings.py
      regexp="^SITEURL"
      line='SITEURL = \'{{SITE_URL}}\''

  - name: Enable QGIS Server
    tags: enable
    lineinfile:
      dest={{ GEONODE_APPHOME }}/geonode/settings.py
      regexp="^    \# \'geonode_qgis_server\',"
      line='    \'geonode_qgis_server\','

  - name: Disable Geoserver
    tags: enable
    lineinfile:
      dest={{ GEONODE_APPHOME }}/geonode/settings.py
      regexp="^    \'geonode.geoserver\',"
      line='    {{ '#' }} \'geonode.geoserver\','

  - name: "{{ GEONODE_APPHOME }}/geonode/qgis_layer"
    file:
      dest={{ GEONODE_APPHOME }}/geonode/qgis_layer
      state=directory
      owner=www-data
      recurse=yes


  - name: "{{ GEONODE_APPHOME }}/geonode/qgis_tiles"
    file:
      dest={{ GEONODE_APPHOME }}/geonode/qgis_tiles
      state=directory
      owner=www-data
      recurse=yes


  - name: "{{ GEONODE_APPHOME }}/geonode/uploaded"
    file:
      dest={{ GEONODE_APPHOME }}/geonode/uploaded
      state=directory
      owner=www-data
      recurse=yes

  - name: 000-default.config
    template:
      dest=/etc/apache2/sites-available/000-default.conf
      mode=0644
      src=../files/000-default.tmpl

  - name: a2ensite 000-default
    command: a2ensite 000-default

  - name: service apache2 reload
    service:
      name=apache2
      state=reloaded
      enabled=yes
